name: CMake

on:
  push:
    branches: [ "master", "workflow" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CONAN_REVISIONS_ENABLED: 1
  CONAN_SYSREQUIRES_MODE: enabled
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:
  build:
    runs-on: ubuntu-latest
    

    steps:
    - uses: actions/checkout@v3
    
    - name: Install GCC
    # You may pin to the exact commit or the version.
    # uses: egor-tensin/setup-gcc@d04208cef6e985db0830428975fc2ab3f28d89a1
      uses: egor-tensin/setup-gcc@v1
      with:
        version: 11
        
    - name: Update depends
      run: |
        sudo apt install libgtk2.0-dev
    
    - name: ConanCache
      uses: actions/cache@v3
      id: cache
      with:
        key: host-${{ runner.os }}-target-${{ runner.os }}-${{ hashFiles('conanfile.txt') }}-v1
        path: ~/.conan/data
    
    - name: Install conan
      run: |
        pip3 install conan

      
    - name: Conan setup
      run: |
        conan profile new default --detect
        conan profile update settings.compiler.libcxx=libstdc++11 default
        conan remote add fgl-conan https://fgl.jfrog.io/artifactory/api/conan/fgl-conan 
      
    - name: Run conan
      run:  conan install . --build=missing -s compiler=gcc 

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake .

    - name: Build
      # Build your program with the given configuration
      run: make -j2
      
    - name: Tests
      working-directory: ${{runner.workspace}}/bin
      run: ctest DBtest
      
